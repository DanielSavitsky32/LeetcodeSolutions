//Daniel Savitsky
//You are given two non-empty linked lists representing two non-negative integers. 
//The digits are stored in reverse order, and each of their nodes contains a single digit. 
//Add the two numbers and return the sum as a linked list. 
//You may assume the two numbers do not contain any leading zero, except the number 0 itself.

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *l3=NULL,*temp;
        int carry=0,sum,rem;
        while(l1 && l2){
            sum=l1->val+l2->val+carry;
            rem=sum%10;
            carry=sum/10;
            if(!l3){
                l3=new ListNode(rem);
                temp=l3;
            }else{
                temp->next=new ListNode (rem);
                temp=temp->next;
            }
            l1=l1->next;
            l2=l2->next;
        }
        while(l1){
            sum=l1->val+carry;
            rem=sum%10;
            carry=sum/10;
            if(!l3){
                l3=new ListNode(rem);
                temp=l3;
            }else{
                temp->next=new ListNode (rem);
                temp=temp->next;
            }
            l1=l1->next;
        }
        while(l2){
            sum=l2->val+carry;
            rem=sum%10;
            carry=sum/10;
            if(!l3){
                l3=new ListNode(rem);
                temp=l3;
            }else{
                temp->next=new ListNode (rem);
                temp=temp->next;
            }
            l2=l2->next;
        }
        if(carry)
            temp->next=new ListNode(carry);
        return l3;
    }
};
